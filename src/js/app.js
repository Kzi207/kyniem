 // D·ªØ li·ªáu ·ª©ng d·ª•ng
        const appData = {
            activeTab: 'home',
            daysTogether: 0,
            musicPlaying: false,
            currentSongIndex: 0,
            songs: [
                {
                    title: "Ch√∫ng Ta C·ªßa Hi·ªán T·∫°i", ///// t√™n b√†i h√°t
                    artist: "S∆°n T√πng M-TP",     //// ngh·ªá sƒ©
                    src: "./music/chungtacuahientay.mp3",   
                    cover: "https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228"
                },
                {
                    title: "C√≥ Ch·∫Øc Y√™u L√† ƒê√¢y",
                    artist: "S∆°n T√πng M-TP",
                    src: "./music/cochacyeuladay.mp3",
                    cover: "https://i.scdn.co/image/ab67616d00001e02663e3c7b4c3347e610b0a5a0"
                },
                {
                    title: "N∆°i N√†y C√≥ Anh",
                    artist: "S∆°n T√πng M-TP",
                    src: "./music/noinaycoanh.mp3",
                    cover: "https://i.scdn.co/image/ab67616d00001e02a48964b5d9a3d6968ae3e0de"
                },
                {
                    title: "Anh L√† C·ªßa Em",
                    artist: "Karik",
                    src: "./music/anhlacuaem.mp3",
                    cover: "https://i.scdn.co/image/ab67616d00001e02a48964b5d9a3d6968ae3e0de"
                }
            ],
            memories: [
                {
                    id: 1,
                    title: "Ng√†y ƒë·∫ßu ti√™n g·∫∑p nhau",
                    date: "29/09/2024",
                    image: "./img/10.png",
                    description: "Ng√†y ƒë·∫ßu ti√™n ch√∫ng ta g·∫∑p nhau t·∫°i tr∆∞·ªùng t·∫∑ng cho s·ª≠a cho em."
                },
                {
                    id: 2,
                    title: "ƒêi ch∆°i c√πng nhau",
                    date: "",
                    image: "./img/3.jpg",
                    description: "K·ª∑ ni·ªám chuy·∫øn du l·ªãch ƒë·∫ßu ti√™n c·ªßa hai ƒë·ª©a. C·∫£nh ƒë·∫πp, ng∆∞·ªùi ƒë·∫πp, m·ªçi th·ª© th·∫≠t ho√†n h·∫£o..."
                },
                {
                    id: 3,
                    title: "ƒêi ch·ª•p h√¨nh n√®",
                    date: "30/7/2025",
                    image: "./img/9.jpg",
                    description: "Nh·ªØng t·∫•m ·∫£nh t·ª± ch·ª•p c√πng nhau<3"
                }
            ],
            importantDates: [
                { name: "Sinh nh·∫≠t anh", date: "22/11/", countdown: "C√≤n 120 ng√†y" },
                { name: "Sinh nh·∫≠t em", date: "09/11/", countdown: "C√≤n 40 ng√†y" },
                { name: "Ng√†y k·ª∑ ni·ªám", date: "08/10/", countdown: "C√≤n 85 ng√†y" },
                { name: "Valentine", date: "14/2/", countdown: "C√≤n 215 ng√†y" }
            ],
            letters: [
                {
                    id: 1,
                    title: "Th∆∞ ƒë·∫ßu ti√™n g·ª≠i em",
                    date: "2024-10-08",
                    content: "Em y√™u, t·ª´ ng√†y ƒë·∫ßu ti√™n g·∫∑p em, anh ƒë√£ bi·∫øt r·∫±ng em ch√≠nh l√† ng∆∞·ªùi m√† anh ƒë√£ t√¨m ki·∫øm su·ªët cu·ªôc ƒë·ªùi n√†y. M·ªói ng√†y b√™n em l√† m·ªôt ng√†y h·∫°nh ph√∫c, m·ªói n·ª• c∆∞·ªùi c·ªßa em l√†m tr√°i tim anh rung ƒë·ªông. Anh y√™u em r·∫•t nhi·ªÅu! ‚ù§Ô∏è"
                },
                {
                    id: 2,
                    title: "Nh·ªØng l·ªùi y√™u th∆∞∆°ng",
                    date: "2024-11-15",
                    content: "Em c√≥ bi·∫øt kh√¥ng, m·ªói khi nh√¨n th·∫•y em, anh c·∫£m th·∫•y nh∆∞ c·∫£ th·∫ø gi·ªõi ƒë·ªÅu d·ª´ng l·∫°i. Em l√† √°nh s√°ng trong cu·ªôc ƒë·ªùi anh, l√† ni·ªÅm vui m·ªói s√°ng th·ª©c d·∫≠y. Anh mong r·∫±ng ch√∫ng ta s·∫Ω m√£i m√£i b√™n nhau, c√πng nhau x√¢y d·ª±ng m·ªôt t∆∞∆°ng lai t∆∞∆°i ƒë·∫πp. Y√™u em! üíï"
                },
                {
                    id: 3,
                    title: "L·ªùi h·ª©a c·ªßa anh",
                    date: "2024-12-20",
                    content: "Em y√™u, anh h·ª©a s·∫Ω lu√¥n y√™u th∆∞∆°ng, chƒÉm s√≥c v√† b·∫£o v·ªá em. Anh s·∫Ω l√†m t·∫•t c·∫£ ƒë·ªÉ em lu√¥n ƒë∆∞·ª£c h·∫°nh ph√∫c. D√π c√≥ kh√≥ khƒÉn g√¨, anh s·∫Ω lu√¥n ·ªü b√™n em, c√πng em v∆∞·ª£t qua m·ªçi th·ª≠ th√°ch. Anh y√™u em v√¥ c√πng! üåπ"
                }
            ]
        };

        // Kh·ªüi t·∫°o ·ª©ng d·ª•ng
        document.addEventListener('DOMContentLoaded', function() {
            // N·∫øu c√≥ hash #main th√¨ b·ªè qua m√†n h√¨nh kh√≥a
            if (window.location.hash === '#main') {
                const lockScreen = document.getElementById('lock-screen');
                const mainApp = document.getElementById('main-app');
                if (lockScreen && mainApp) {
                    lockScreen.classList.add('hidden');
                    mainApp.classList.remove('hidden');
                }
                // X√≥a hash ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng l·∫ßn sau
                history.replaceState(null, '', window.location.pathname);
            }
            // Th√™m s·ª± ki·ªán cho n√∫t V√≤ng quay (menu desktop)
            const roundaboutBtn = document.getElementById('roundabout-menu-btn');
            if (roundaboutBtn) {
                roundaboutBtn.addEventListener('click', function() {
                    window.location.href = 'vongquay.html';
                });
            }
            // Th√™m s·ª± ki·ªán cho n√∫t V√≤ng quay (menu mobile)
            const roundaboutBtnMobile = document.getElementById('roundabout-menu-btn-mobile');
            if (roundaboutBtnMobile) {
                roundaboutBtnMobile.addEventListener('click', function() {
                    window.location.href = 'vongquay.html';
                });
            }
            // T√≠nh s·ªë ng√†y y√™u nhau
            calculateLoveDays();
            
            // C√†i ƒë·∫∑t tr√¨nh ph√°t nh·∫°c
            setupMusicPlayer();
            
            // Hi·ªÉn th·ªã tab m·∫∑c ƒë·ªãnh
            showTab(appData.activeTab);
            
            // Th√™m s·ª± ki·ªán cho c√°c n√∫t tab
            document.querySelectorAll('.tab-button').forEach(button => {
                button.addEventListener('click', function() {
                    const tab = this.getAttribute('data-tab');
                    showTab(tab);
                });
            });
            
            // X·ª≠ l√Ω menu mobile
            const mobileMenuButton = document.getElementById('mobile-menu-button');
            const closeMobileMenuButton = document.getElementById('close-mobile-menu');
            const mobileMenu = document.getElementById('mobile-menu');
            const menuOverlay = document.getElementById('menu-overlay');

            mobileMenuButton.addEventListener('click', function() {
                mobileMenu.classList.add('show');
                menuOverlay.classList.add('show');
                document.body.style.overflow = 'hidden';
            });

            closeMobileMenuButton.addEventListener('click', closeMobileMenu);
            
            menuOverlay.addEventListener('click', closeMobileMenu);

            function closeMobileMenu() {
                mobileMenu.classList.remove('show');
                menuOverlay.classList.remove('show');
                document.body.style.overflow = '';
            }

            // ƒê√≥ng menu khi ch·ªçn m·ªôt tab tr√™n mobile
            document.querySelectorAll('#mobile-menu .tab-button').forEach(button => {
                button.addEventListener('click', function() {
                    closeMobileMenu();
                    const tab = this.getAttribute('data-tab');
                    showTab(tab);
                });
            });

            // M√†n h√¨nh kh√≥a
            const lockScreen = document.getElementById('lock-screen');
            const mainApp = document.getElementById('main-app');
            const passcodeDots = [];
            for (let i = 1; i <= 8; i++) passcodeDots.push(document.getElementById(`dot-${i}`));
            const numButtons = lockScreen.querySelectorAll('.num-btn[data-number]');
            const deleteBtn = document.getElementById('delete-btn');
            const passcodeError = document.getElementById('passcode-error');
            let enteredPasscode = '';
            const correctPasscode = '09112009'; // ƒê·ªïi m·∫≠t kh·∫©u t·∫°i ƒë√¢y
            function updateDots() {
                passcodeDots.forEach((dot, idx) => {
                    if (idx < enteredPasscode.length) dot.classList.add('bg-white', 'shadow-lg');
                    else dot.classList.remove('bg-white', 'shadow-lg');
                });
            }
            numButtons.forEach(btn => btn.addEventListener('click', function() {
                if (enteredPasscode.length < 8) {
                    enteredPasscode += this.getAttribute('data-number');
                    updateDots();
                    if (enteredPasscode.length === 8) {
                        if (enteredPasscode === correctPasscode) {
                            lockScreen.classList.add('hidden');
                            mainApp.classList.remove('hidden');
                        } else {
                            passcodeError.classList.remove('hidden');
                            setTimeout(() => {
                                enteredPasscode = '';
                                updateDots();
                                passcodeError.classList.add('hidden');
                            }, 800);
                        }
                    }
                }
            }));
            deleteBtn.addEventListener('click', function() {
                if (enteredPasscode.length > 0) {
                    enteredPasscode = enteredPasscode.slice(0, -1);
                    updateDots();
                }
            });
            updateDots();

            // Th√™m s·ª± ki·ªán cho n√∫t 'Xem t·∫•t c·∫£ k·ª∑ ni·ªám' ·ªü Home
            document.body.addEventListener('click', function(e) {
                if (e.target.closest('button') && e.target.textContent.includes('Xem t·∫•t c·∫£ k·ª∑ ni·ªám')) {
                    showTab('album');
                }
            });
        });

        // T√≠nh s·ªë ng√†y y√™u nhau
        function calculateLoveDays() {
            const startDate = new Date("2024-10-08");
            const today = new Date();
            const diffTime = Math.abs(today - startDate);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            appData.daysTogether = diffDays;
            
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã n·∫øu tab countdown ƒëang hi·ªÉn th·ªã
            if (appData.activeTab === 'countdown') {
                document.getElementById('days-together').textContent = diffDays.toLocaleString();
            }
        }

        // Hi·ªÉn th·ªã tab ƒë∆∞·ª£c ch·ªçn
        function showTab(tabName) {
            appData.activeTab = tabName;
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i active c·ªßa c√°c n√∫t tab
            document.querySelectorAll('.tab-button').forEach(button => {
                if (button.getAttribute('data-tab') === tabName) {
                    button.classList.add('text-pink-600');
                    button.classList.remove('text-gray-600');
                } else {
                    button.classList.remove('text-pink-600');
                    button.classList.add('text-gray-600');
                }
            });
            
            // L·∫•y template t∆∞∆°ng ·ª©ng
            const template = document.getElementById(`${tabName}-template`);
            const content = template.content.cloneNode(true);
            
            // X√≥a n·ªôi dung hi·ªán t·∫°i v√† th√™m n·ªôi dung m·ªõi
            const mainContent = document.getElementById('main-content');
            mainContent.innerHTML = '';
            mainContent.appendChild(content);
            
            // T·∫£i d·ªØ li·ªáu c·ª• th·ªÉ cho tab
            switch(tabName) {
                case 'memories':
                    loadMemories();
                    break;
                case 'music':
                    loadMusicPlayer();
                    // Th√™m s·ª± ki·ªán cho c√°c n√∫t ƒëi·ªÅu khi·ªÉn nh·∫°c
                    document.getElementById('play-button').addEventListener('click', togglePlay);
                    document.getElementById('prev-song').addEventListener('click', prevSong);
                    document.getElementById('next-song').addEventListener('click', nextSong);
                    break;
                case 'countdown':
                    updateLoveTime();
                    if (window.loveInterval) clearInterval(window.loveInterval);
                    window.loveInterval = setInterval(updateLoveTime, 1000);
                    updateImportantDates();
                    break;
                case 'quiz':
                    // Kh√¥ng c·∫ßn t·∫£i d·ªØ li·ªáu c·ª• th·ªÉ cho quiz, ch·ªâ hi·ªÉn th·ªã giao di·ªán
                    break;
                case 'plan':
                    document.body.classList.add('plan-tab');
                    break;
                case 'album':
                    // Th√™m script Swiper n·∫øu ch∆∞a c√≥
                    if (!document.getElementById('swiper-script')) {
                        const s = document.createElement('script');
                        s.src = 'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js';
                        s.id = 'swiper-script';
                        document.body.appendChild(s);
                        s.onload = renderAlbum;
                    } else {
                        renderAlbum();
                    }
                    break;
                case 'letter':
                    loadLetters();
                    break;
                case 'mistake':
                    document.body.classList.add('mistake-tab');
                    showMistakeTab();
                    break;
                default:
                    document.body.classList.remove('plan-tab');
                    document.body.classList.remove('mistake-tab');
                    break;
            }
        }

        // T·∫£i danh s√°ch k·ª∑ ni·ªám
        function loadMemories() {
            const container = document.getElementById('memories-container');
            container.innerHTML = '';
            
            appData.memories.forEach(memory => {
                const memoryElement = document.createElement('div');
                memoryElement.className = 'bg-white rounded-lg overflow-hidden shadow-lg transform transition duration-300 hover:shadow-2xl hover:-translate-y-1 memory-card';
                memoryElement.innerHTML = `
                    <img src="${memory.image}" alt="${memory.title}" class="w-full h-48 object-cover">
                    <div class="p-4">
                        <h3 class="font-bold text-lg mb-2 text-pink-600">${memory.title}</h3>
                        <p class="text-gray-600 text-sm">${memory.date} - ${memory.description}</p>
                        <div class="mt-3 flex justify-between text-sm text-gray-500">
                            <span>üì∑ H√¨nh ·∫£nh</span>
                            <span>‚ù§Ô∏è Th√™m v√†o y√™u th√≠ch</span>
                        </div>
                    </div>
                `;
                container.appendChild(memoryElement);
            });
        }

        // C√†i ƒë·∫∑t tr√¨nh ph√°t nh·∫°c
        function setupMusicPlayer() {
            const audio = document.getElementById('music-player');
            let progressInterval;
            
            // S·ª± ki·ªán khi metadata c·ªßa b√†i h√°t ƒë∆∞·ª£c t·∫£i
            audio.addEventListener('loadedmetadata', function() {
                document.getElementById('duration').textContent = formatTime(audio.duration);
            });
            
            // S·ª± ki·ªán khi b√†i h√°t k·∫øt th√∫c
            audio.addEventListener('ended', function() {
                nextSong();
            });
            
            // S·ª± ki·ªán khi th·ªùi gian ph√°t thay ƒë·ªïi
            audio.addEventListener('timeupdate', function() {
                const progress = (audio.currentTime / audio.duration) * 100;
                document.getElementById('progress-bar').style.width = `${progress}%`;
                document.getElementById('current-time').textContent = formatTime(audio.currentTime);
            });
        }

        // T·∫£i tr√¨nh ph√°t nh·∫°c
        function loadMusicPlayer() {
            const audio = document.getElementById('music-player');
            
            // C·∫≠p nh·∫≠t th√¥ng tin b√†i h√°t hi·ªán t·∫°i
            updateCurrentSong();
            
            // T·∫£i danh s√°ch ph√°t
            const playlist = document.getElementById('playlist');
            playlist.innerHTML = '';
            
            appData.songs.forEach((song, index) => {
                const li = document.createElement('li');
                li.className = `p-2 rounded cursor-pointer transition-colors playlist-item ${index === appData.currentSongIndex ? 'bg-pink-100 text-pink-700' : 'hover:bg-gray-100'}`;
                li.setAttribute('data-index', index);
                li.innerHTML = `
                    <div class="flex justify-between items-center">
                        <span class="font-medium">${song.title}</span>
                        <span class="text-xs text-gray-500">${song.artist}</span>
                    </div>
                `;
                playlist.appendChild(li);
                
                // Th√™m s·ª± ki·ªán click cho t·ª´ng b√†i h√°t trong playlist
                li.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    playSong(index);
                });
            });
            
            // N·∫øu ƒëang ph√°t nh·∫°c, ti·∫øp t·ª•c ph√°t b√†i h√°t hi·ªán t·∫°i
            if (appData.musicPlaying) {
                audio.src = appData.songs[appData.currentSongIndex].src;
                audio.play();
            }
        }

        // C·∫≠p nh·∫≠t th√¥ng tin b√†i h√°t hi·ªán t·∫°i
        function updateCurrentSong() {
            const currentSong = appData.songs[appData.currentSongIndex];
            document.getElementById('album-cover').src = currentSong.cover;
            document.getElementById('song-title').textContent = currentSong.title;
            document.getElementById('song-artist').textContent = currentSong.artist;
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i active trong playlist
            document.querySelectorAll('.playlist-item').forEach((item, index) => {
                if (index === appData.currentSongIndex) {
                    item.classList.add('bg-pink-100', 'text-pink-700');
                    item.classList.remove('hover:bg-gray-100');
                } else {
                    item.classList.remove('bg-pink-100', 'text-pink-700');
                    item.classList.add('hover:bg-gray-100');
                }
            });
        }

        // Ph√°t/t·∫°m d·ª´ng nh·∫°c
        function togglePlay() {
            const audio = document.getElementById('music-player');
            const playIcon = document.getElementById('play-icon');
            
            if (appData.musicPlaying) {
                audio.pause();
                playIcon.classList.remove('fa-pause');
                playIcon.classList.add('fa-play');
                appData.musicPlaying = false;
            } else {
                // N·∫øu ch∆∞a c√≥ src, ƒë·∫∑t src b√†i h√°t hi·ªán t·∫°i
                if (!audio.src) {
                    audio.src = appData.songs[appData.currentSongIndex].src;
                }
                audio.play().then(() => {
                    playIcon.classList.remove('fa-play');
                    playIcon.classList.add('fa-pause');
                    appData.musicPlaying = true;
                }).catch(error => {
                    console.error("L·ªói khi ph√°t nh·∫°c:", error);
                });
            }
        }

        // Ph√°t b√†i h√°t c·ª• th·ªÉ
        function playSong(index) {
            const audio = document.getElementById('music-player');
            appData.currentSongIndex = index;
            audio.src = appData.songs[index].src;
            audio.play().then(() => {
                appData.musicPlaying = true;
                
                // C·∫≠p nh·∫≠t giao di·ªán
                updateCurrentSong();
                document.getElementById('play-icon').classList.remove('fa-play');
                document.getElementById('play-icon').classList.add('fa-pause');
            }).catch(error => {
                console.error("L·ªói khi ph√°t nh·∫°c:", error);
            });
        }

        // B√†i h√°t ti·∫øp theo
        function nextSong() {
            appData.currentSongIndex = (appData.currentSongIndex + 1) % appData.songs.length;
            playSong(appData.currentSongIndex);
        }

        // B√†i h√°t tr∆∞·ªõc ƒë√≥
        function prevSong() {
            appData.currentSongIndex = (appData.currentSongIndex - 1 + appData.songs.length) % appData.songs.length;
            playSong(appData.currentSongIndex);
        }

        // ƒê·ªãnh d·∫°ng th·ªùi gian (ph√∫t:gi√¢y)
        function formatTime(seconds) {
            if (isNaN(seconds)) return "0:00";
            
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
        }

        function updateLoveTime() {
            const startDate = new Date("2024-10-08T00:00:00"); // Ng√†y b·∫Øt ƒë·∫ßu y√™u
            const now = new Date();
            let diff = now - startDate;
            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
            diff -= days * (1000 * 60 * 60 * 24);
            const hours = Math.floor(diff / (1000 * 60 * 60));
            diff -= hours * (1000 * 60 * 60);
            const minutes = Math.floor(diff / (1000 * 60));
            diff -= minutes * (1000 * 60);
            const seconds = Math.floor(diff / 1000);
            
            document.getElementById('days-together').textContent = days;
            document.getElementById('hours-together').textContent = hours.toString().padStart(2, '0');
            document.getElementById('minutes-together').textContent = minutes.toString().padStart(2, '0');
            document.getElementById('seconds-together').textContent = seconds.toString().padStart(2, '0');
        }

        function updateImportantDates() {
            const list = document.getElementById('important-dates-list');
            if (!list) return;
            list.innerHTML = '';
            const today = new Date();
            appData.importantDates.forEach(event => {
                // X·ª≠ l√Ω ng√†y d·∫°ng dd/mm/yyyy ho·∫∑c dd/mm/
                let [day, month, year] = event.date.split('/');
                if (!year || year === '') {
                    year = today.getFullYear();
                }
                let eventDate = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}T00:00:00`);
                // N·∫øu s·ª± ki·ªán ƒë√£ qua trong nƒÉm nay, chuy·ªÉn sang nƒÉm sau
                if (eventDate < today) {
                    eventDate.setFullYear(eventDate.getFullYear() + 1);
                }
                const diffTime = eventDate - today;
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                const daysText = diffDays > 0 ? `C√≤n ${diffDays} ng√†y` : (diffDays === 0 ? 'H√¥m nay!' : 'ƒê√£ qua');
                const li = document.createElement('li');
                li.className = 'flex justify-between items-center bg-pink-50 rounded-lg px-4 py-2';
                li.innerHTML = `<span class="font-medium text-gray-700">${event.name}</span><span class="text-pink-600 font-semibold">${daysText}</span>`;
                list.appendChild(li);
            });
        }

        function renderAlbum() {
            const images = [
                "./img/1.jpg",
                "./img/2.jpg",
                "./img/3.jpg",
                "./img/4.jpg",
                "./img/5.jpg",
                "./img/6.jpg",
                "./img/7.jpg",
                "./img/8.jpg",
                "./img/9.jpg",
            ];
            const album = document.getElementById("album");
            if (!album) return;
            album.innerHTML = '';
            images.forEach(link => {
                const slide = document.createElement("div");
                slide.className = "swiper-slide";
                slide.innerHTML = `<img src="${link}" alt="·∫¢nh album">`;
                album.appendChild(slide);
            });
            if (window.albumSwiper) window.albumSwiper.destroy(true, true);
            window.albumSwiper = new Swiper('.swiper', {
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev'
                },
                loop: true
            });
        }

        // T·∫£i danh s√°ch th∆∞
        function loadLetters() {
            const container = document.getElementById('letters-container');
            if (!container) return;
            
            container.innerHTML = '';
            
            appData.letters.forEach(letter => {
                const letterElement = document.createElement('div');
                letterElement.className = 'bg-white rounded-lg overflow-hidden shadow-lg transform transition duration-300 hover:shadow-2xl hover:-translate-y-1 memory-card';
                letterElement.innerHTML = `
                    <div class="p-6">
                        <div class="flex items-center justify-between mb-3">
                            <h3 class="font-bold text-lg text-pink-600">${letter.title}</h3>
                            <span class="text-sm text-gray-500">${formatDate(letter.date)}</span>
                        </div>
                        <p class="text-gray-700 text-sm leading-relaxed mb-4">${letter.content.substring(0, 150)}${letter.content.length > 150 ? '...' : ''}</p>
                        <div class="flex justify-between items-center">
                            <button class="text-pink-500 hover:text-pink-700 text-sm font-medium read-letter-btn" data-letter-id="${letter.id}">
                                <i class="fas fa-eye mr-1"></i>ƒê·ªçc th∆∞
                            </button>
                            <div class="flex space-x-2">
                                <button class="text-gray-500 hover:text-pink-500 text-sm edit-letter-btn" data-letter-id="${letter.id}">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="text-gray-500 hover:text-red-500 text-sm delete-letter-btn" data-letter-id="${letter.id}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(letterElement);
            });
            
            // Th√™m s·ª± ki·ªán cho c√°c n√∫t
            addLetterEventListeners();
            
            // Th√™m s·ª± ki·ªán cho form vi·∫øt th∆∞ m·ªõi
            const newLetterForm = document.getElementById('new-letter-form');
            if (newLetterForm) {
                newLetterForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    addNewLetter();
                });
            }
        }

        // Th√™m s·ª± ki·ªán cho c√°c n√∫t th∆∞
        function addLetterEventListeners() {
            // N√∫t ƒë·ªçc th∆∞
            document.querySelectorAll('.read-letter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const letterId = parseInt(this.getAttribute('data-letter-id'));
                    const letter = appData.letters.find(l => l.id === letterId);
                    if (letter) {
                        showLetterModal(letter);
                    }
                });
            });
            
            // N√∫t s·ª≠a th∆∞
            document.querySelectorAll('.edit-letter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const letterId = parseInt(this.getAttribute('data-letter-id'));
                    const letter = appData.letters.find(l => l.id === letterId);
                    if (letter) {
                        editLetter(letter);
                    }
                });
            });
            
            // N√∫t x√≥a th∆∞
            document.querySelectorAll('.delete-letter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const letterId = parseInt(this.getAttribute('data-letter-id'));
                    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a th∆∞ n√†y?')) {
                        deleteLetter(letterId);
                    }
                });
            });
        }

        // Hi·ªÉn th·ªã modal ƒë·ªçc th∆∞
        function showLetterModal(letter) {
            // T·∫°o modal
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-white rounded-xl p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-xl font-bold text-pink-600">${letter.title}</h3>
                        <button class="text-gray-500 hover:text-gray-700 text-2xl close-modal">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="text-sm text-gray-500 mb-4">${formatDate(letter.date)}</div>
                    <div class="text-gray-700 leading-relaxed whitespace-pre-wrap">${letter.content}</div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // S·ª± ki·ªán ƒë√≥ng modal
            modal.querySelector('.close-modal').addEventListener('click', function() {
                document.body.removeChild(modal);
            });
            
            // ƒê√≥ng modal khi click b√™n ngo√†i
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    document.body.removeChild(modal);
                }
            });
        }

        // S·ª≠a th∆∞
        function editLetter(letter) {
            // ƒêi·ªÅn form v·ªõi d·ªØ li·ªáu th∆∞ hi·ªán t·∫°i
            document.getElementById('letter-title').value = letter.title;
            document.getElementById('letter-content').value = letter.content;
            
            // Thay ƒë·ªïi n√∫t submit
            const submitBtn = document.querySelector('#new-letter-form button[type="submit"]');
            submitBtn.innerHTML = '<i class="fas fa-save mr-2"></i>C·∫≠p nh·∫≠t th∆∞';
            submitBtn.setAttribute('data-edit-id', letter.id);
            
            // Scroll ƒë·∫øn form
            document.getElementById('new-letter-form').scrollIntoView({ behavior: 'smooth' });
        }

        // X√≥a th∆∞
        function deleteLetter(letterId) {
            const index = appData.letters.findIndex(l => l.id === letterId);
            if (index !== -1) {
                appData.letters.splice(index, 1);
                loadLetters();
                alert('ƒê√£ x√≥a th∆∞ th√†nh c√¥ng!');
            }
        }

        // Th√™m th∆∞ m·ªõi ho·∫∑c c·∫≠p nh·∫≠t th∆∞
        function addNewLetter() {
            const title = document.getElementById('letter-title').value;
            const content = document.getElementById('letter-content').value;
            const submitBtn = document.querySelector('#new-letter-form button[type="submit"]');
            const editId = submitBtn.getAttribute('data-edit-id');
            
            if (!title || !content) {
                alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
                return;
            }
            
            if (editId) {
                // C·∫≠p nh·∫≠t th∆∞ hi·ªán c√≥
                const letterIndex = appData.letters.findIndex(l => l.id === parseInt(editId));
                if (letterIndex !== -1) {
                    appData.letters[letterIndex].title = title;
                    appData.letters[letterIndex].content = content;
                    
                    // Reset form v√† n√∫t
                    submitBtn.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>G·ª≠i th∆∞ üíñ';
                    submitBtn.removeAttribute('data-edit-id');
                    
                    const successMessage = document.createElement('div');
                    successMessage.className = 'bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4';
                    successMessage.innerHTML = 'Th∆∞ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng! üíñ';
                    
                    const form = document.getElementById('new-letter-form');
                    form.parentNode.insertBefore(successMessage, form);
                    
                    setTimeout(() => {
                        if (successMessage.parentNode) {
                            successMessage.parentNode.removeChild(successMessage);
                        }
                    }, 3000);
                }
            } else {
                // Th√™m th∆∞ m·ªõi
                const newLetter = {
                    id: Date.now(), // S·ª≠ d·ª•ng timestamp l√†m ID
                    title: title,
                    content: content,
                    date: new Date().toISOString().split('T')[0] // Format YYYY-MM-DD
                };
                
                appData.letters.unshift(newLetter); // Th√™m v√†o ƒë·∫ßu danh s√°ch
                
                const successMessage = document.createElement('div');
                successMessage.className = 'bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4';
                successMessage.innerHTML = 'Th∆∞ ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! üíñ';
                
                const form = document.getElementById('new-letter-form');
                form.parentNode.insertBefore(successMessage, form);
                
                setTimeout(() => {
                    if (successMessage.parentNode) {
                        successMessage.parentNode.removeChild(successMessage);
                    }
                }, 3000);
            }
            
            loadLetters();
            document.getElementById('new-letter-form').reset();
        }

        // ƒê·ªãnh d·∫°ng ng√†y
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }
        // Ch·∫∑n b√¥i ƒëen vƒÉn b·∫£n
        document.addEventListener('selectstart', function(e) {
            e.preventDefault();
        });

        // Ch·∫∑n menu chu·ªôt ph·∫£i
        document.addEventListener('contextmenu', function(e) {
            e.preventDefault();
        });

        // Ch·∫∑n copy (Ctrl+C)
        document.addEventListener('copy', function(e) {
            e.preventDefault();
            alert('Kh√¥ng cho ph√©p sao ch√©p n·ªôi dung!');
        });

        // Ch·∫∑n cut (Ctrl+X)
        document.addEventListener('cut', function(e) {
            e.preventDefault();
        });

        // Ch·∫∑n paste (Ctrl+V)
        document.addEventListener('paste', function(e) {
            e.preventDefault();
        });

        // Hi·ªÉn th·ªã tab L·ªói c·ªßa anh
        function showMistakeTab() {
          // L·∫•y template
          const template = document.getElementById('mistake-template');
          const content = template.content.cloneNode(true);
          const mainContent = document.getElementById('main-content');
          mainContent.innerHTML = '';
          mainContent.appendChild(content);

          // G·∫Øn l·∫°i s·ª± ki·ªán cho form v√† load d·ªØ li·ªáu
          setTimeout(() => {
            const form = document.getElementById("loveForm");
            if (form) {
              form.addEventListener("submit", function(e) {
                e.preventDefault();
                document.getElementById("timestamp").value = new Date().toLocaleString();
                const formData = new FormData(form);
                fetch("https://sheetdb.io/api/v1/9y1uawujxex5m", {
                  method: "POST",
                  body: formData
                })
                .then(res => res.json())
                .then(() => {
                  document.getElementById("successMsg").style.display = "block";
                  form.reset();
                  loadEntries();
                });
              });
            }
            window.loadEntries = function() {
              fetch("https://sheetdb.io/api/v1/9y1uawujxex5m")
                .then(response => response.json())
                .then(data => {
                  const entriesDiv = document.getElementById("entries");
                  const countDiv = document.getElementById("errorCount");
                  entriesDiv.innerHTML = '<h2>Danh s√°ch l·ªói c·ªßa anh üìú</h2>';
                  countDiv.textContent = `T·ªïng c·ªông anh ƒë√£ g√¢y ra ${data.length} l·ªói üò¢`;
                  entriesDiv.appendChild(countDiv);
                  data.reverse().forEach(entry => {
                    const div = document.createElement("div");
                    div.className = "entry";
                    div.innerHTML = `
                      <p><strong>L·ªói:</strong> ${entry.mistake}</p>
                      <p><strong>Em mu·ªën anh:</strong> ${entry.suggestion}</p>
                      <p style="font-size: 0.85em; color: gray;">üïí ${entry.time}</p>
                    `;
                    entriesDiv.appendChild(div);
                  });
                });
            }
            window.loadEntries();
          }, 0);
        }


   